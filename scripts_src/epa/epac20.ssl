/*
  ***   Script conwerted to Interplay format by Fallout Script Edytor (by Jargo)  ***
*/

#define SCRIPT_REALNAME "epac20"
#include "../headers/define.h"
//#include "../headers/<TownMapName.h>"

#define NAME                    SCRIPT_EPAC20          //Script name from scripts.h
#define TOWN_REP_VAR            GVAR_TOWN_REP_           //Global variable name for this Town

#include "../headers/command.h"
#include "../headers/modreact.h"
#include "../headers/partybkg.h"

#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)

procedure start;
procedure critter_p_proc;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure talk_p_proc;
procedure timed_event_p_proc;

procedure start
begin
  if (cur_map_index == MAP_EPA) then
    add_timer_event(self_obj, game_ticks(5), 1);
  else if( cur_map_index == MAP_EPA_SUBLEVELS_1 or cur_map_index == MAP_EPA_SUBLEVELS_2) then
  begin
    if (self_elevation == 0) then
      add_timer_event(self_obj, game_ticks(5), 5);
    else if (self_elevation == 2) then
      add_timer_event(self_obj, game_ticks(5), 9);
  end
end

procedure critter_p_proc
begin
  if (global_var(GVAR_FIX_VOICECOMP) == 5) then
    destroy_object(self_obj);
end

procedure use_p_proc
begin
end

procedure look_at_p_proc
begin
end

procedure description_p_proc
begin
end

procedure use_skill_on_p_proc
begin
end

procedure use_obj_on_p_proc
begin
end

procedure damage_p_proc
begin
  if (source_obj == dude_obj) then
    attack(dude_obj);
end

procedure map_enter_p_proc
begin

  if (cur_map_index == MAP_EPA) then
    add_timer_event(self_obj, game_ticks(5), 1);
  else if( cur_map_index == MAP_EPA_SUBLEVELS_1 or cur_map_index == MAP_EPA_SUBLEVELS_2) then
  begin
    if (self_elevation == 0) then
      add_timer_event(self_obj, game_ticks(5), 5);
    else if (self_elevation == 2) then
      add_timer_event(self_obj, game_ticks(5), 9);
  end

end

procedure map_update_p_proc
begin
end

procedure talk_p_proc
begin
end

procedure timed_event_p_proc
begin
  if (fixed_param == 1) then
  begin
    if (((critter_state(self_obj) bwand 2) == 0) and not combat_is_initialized) then
    begin
      reg_anim_clear( self_obj);
      reg_anim_begin();
      self_walk_to_tile(16083);
      reg_anim_end();
    end
    add_timer_event(self_obj, game_ticks(20), 2);
  end
  if (fixed_param == 2) then
  begin
    if (((critter_state(self_obj) bwand 2) == 0) and not combat_is_initialized) then
    begin
      reg_anim_clear( self_obj);
      reg_anim_begin();
      self_walk_to_tile(16132);
      reg_anim_end();
    end
    add_timer_event(self_obj, game_ticks(20), 3);
  end
  if (fixed_param == 3) then
  begin
    if (((critter_state(self_obj) bwand 2) == 0) and not combat_is_initialized) then
    begin
      reg_anim_clear( self_obj);
      reg_anim_begin();
      self_walk_to_tile(20933);
      reg_anim_end();
    end
    add_timer_event(self_obj, game_ticks(20), 4);
  end
  if (fixed_param == 4) then
  begin
    if (((critter_state(self_obj) bwand 2) == 0) and not combat_is_initialized) then
    begin
      reg_anim_clear( self_obj);
      reg_anim_begin();
      self_walk_to_tile(20683);
      reg_anim_end();
    end
    add_timer_event(self_obj, game_ticks(20), 1);
  end
  if (fixed_param == 5) then
  begin
    if (((critter_state(self_obj) bwand 2) == 0) and not combat_is_initialized) then
    begin
      reg_anim_clear( self_obj);
      reg_anim_begin();
      self_walk_to_tile(16066);
      reg_anim_end();
    end
    add_timer_event(self_obj, game_ticks(20), 6);
  end
  if (fixed_param == 6) then
  begin
    if (((critter_state(self_obj) bwand 2) == 0) and not combat_is_initialized) then
    begin
      reg_anim_clear( self_obj);
      reg_anim_begin();
      self_walk_to_tile(18479);
      reg_anim_end();
    end
    add_timer_event(self_obj, game_ticks(20), 7);
  end
  if (fixed_param == 7) then
  begin
    if (((critter_state(self_obj) bwand 2) == 0) and not combat_is_initialized) then
    begin
      reg_anim_clear( self_obj);
      reg_anim_begin();
      self_walk_to_tile(26682);
      reg_anim_end();
    end
    add_timer_event(self_obj, game_ticks(20), 8);
  end
  if (fixed_param == 8) then
  begin
    if (((critter_state(self_obj) bwand 2) == 0) and not combat_is_initialized) then
    begin
      reg_anim_clear( self_obj);
      reg_anim_begin();
      self_walk_to_tile(26067);
      reg_anim_end();
    end
    add_timer_event(self_obj, game_ticks(20), 5);
  end
  if (fixed_param == 9) then
  begin
    if (((critter_state(self_obj) bwand 2) == 0) and not combat_is_initialized) then
    begin
      reg_anim_clear( self_obj);
      reg_anim_begin();
      self_walk_to_tile(22515);
      reg_anim_end();
    end
    add_timer_event(self_obj, game_ticks(20), 10);
  end
  if (fixed_param == 10) then
  begin
    if (((critter_state(self_obj) bwand 2) == 0) and not combat_is_initialized) then
    begin
      reg_anim_clear( self_obj);
      reg_anim_begin();
      self_walk_to_tile(18714);
      reg_anim_end();
    end
    add_timer_event(self_obj, game_ticks(20), 11);
  end
  if (fixed_param == 11) then
  begin
    if (((critter_state(self_obj) bwand 2) == 0) and not combat_is_initialized) then
    begin
      reg_anim_clear( self_obj);
      reg_anim_begin();
      self_walk_to_tile(19126);
      reg_anim_end();
    end
    add_timer_event(self_obj, game_ticks(20), 12);
  end
  if (fixed_param == 12) then
  begin
    if (((critter_state(self_obj) bwand 2) == 0) and not combat_is_initialized) then
    begin
      reg_anim_clear( self_obj);
      reg_anim_begin();
      self_walk_to_tile(22126);
      reg_anim_end();
    end
    add_timer_event(self_obj, game_ticks(20), 13);
  end
  if (fixed_param == 13) then
  begin
    if (((critter_state(self_obj) bwand 2) == 0) and not combat_is_initialized) then
    begin
      reg_anim_clear( self_obj);
      reg_anim_begin();
      self_walk_to_tile(22298);
      reg_anim_end();
    end
    add_timer_event(self_obj, game_ticks(20), 9);
  end
end
